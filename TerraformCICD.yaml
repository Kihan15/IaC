name: TerraformCICD

# Triggers the workflow on pushes to the 'main' branch
# and allows manual running via workflow_dispatch
on:
  push:
    branches:
      - main
  workflow_dispatch:

# Configure permissions for OIDC token generation
permissions:
  id-token: write # Required for the azure/login action (OIDC)
  contents: read  # Allows checkout of the repository code

# Define the environment variables used throughout the pipeline
env:
  TF_WORKING_DIR: './terraform'  # Change this if your .tf files are elsewhere
  TF_VERSION: 'latest' # Specify a version like '1.7.0' or use 'latest'

jobs:
  terraform:
    runs-on: ubuntu-latest
    
    # Optional: Use a GitHub Environment for protection rules
    # environment: Production 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ----------------------------------------------------
      # 1. AUTHENTICATE TO AZURE via OIDC (Management Group Scope)
      # ----------------------------------------------------
      - name: 'Azure Login (OIDC - MG Scope)'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          # NOTE: We intentionally OMIT the subscription-id. 
          # The Service Principal's permissions are inherited from the MG.
          
      # ----------------------------------------------------
      # 2. SETUP TERRAFORM
      # ----------------------------------------------------
      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # ----------------------------------------------------
      # 3. TERRAFORM WORKFLOW
      # ----------------------------------------------------
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}
        # If using Azure Storage for remote state, ensure your provider/backend 
        # configuration in your .tf files is set up to use the OIDC token:
        # provider "azurerm" {
        #   features {}
        #   use_oidc = true # This is crucial for OIDC authentication
        # }
      
      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: true # Allow plan output to be captured even on error

      - name: Show Plan Output
        if: github.event_name == 'pull_request' || success() || failure()
        run: echo "${{ steps.plan.outputs.stdout }}"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && success() # Only apply on successful merge/push to main
        run: terraform apply -auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}

      # ----------------------------------------------------
      # 4. POST-DEPLOYMENT
      # ----------------------------------------------------
      - name: Azure Logout
        run: az logout
